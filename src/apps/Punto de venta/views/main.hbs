<link rel='stylesheet' href='/css/desktop/uicons-solid-rounded.css'>
<style>
    .container-point-of-sales{
        display: flex;
        justify-content: space-between;
        width: 100%;
        height: 100%;
        background-color: #fff;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }

    .menu-point-of-sales{
        width: 65%;
        padding: 15px;
        background-color: #fff;
    }

    .menu-point-of-sales h2 {
        font-size: 28px;
        color: #333;
        margin-bottom: 20px;
        font-weight: 600;
        text-transform: uppercase;
    }

    .product-cards-point-of-sales {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 20px;

        max-height: 100%;
        overflow-y: auto;
    }

    .product-card-point-of-sales {
        background-color: #fff;
        padding: 20px;
        border-radius: 12px;
        text-align: center;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        cursor: pointer;
        transition: transform 0.3s, box-shadow 0.3s;
    }

    .product-card-point-of-sales:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
    }

    .product-card-point-of-sales img {
        width: 100px;
        height: 100px;
        object-fit: contain;
        margin-bottom: 20px;
    }

    .product-card-point-of-sales .product-name-point-of-sales {
        font-size: 16px;
        font-weight: 500;
        color: #333;
    }

    .product-card-point-of-sales .product-barcode-point-of-sales {
        font-size: 14px;
        color: #777;
    }

    .cart-point-of-sales {
        width: 30%;
        padding: 30px;
        background-color: #fff;
        border-left: 1px solid #ddd;
    }

    .cart-point-of-sales h2 {
        font-size: 28px;
        color: #333;
        margin-bottom: 20px;
        font-weight: 600;
        text-transform: uppercase;
    }

    .cart-items-point-of-sales {
        max-height: 500px;
        overflow-y: auto;
        /* Scrollbar cuando se sobrepasa la longitud */
        margin-bottom: 30px;
    }

    .cart-item-point-of-sales {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 15px;
        padding: 15px;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .cart-item-point-of-sales img {
        width: 60px;
        height: 60px;
        object-fit: contain;
        margin-right: 15px;
    }

    .cart-item-info-point-of-sales {
        flex: 1;
    }

    .cart-item-name-point-of-sales,
    .cart-item-barcode-point-of-sales,
    .cart-item-price-point-of-sales,
    .cart-item-total-point-of-sales {
        font-size: 14px;
        color: #333;
    }

    .cart-item-quantity-point-of-sales,
    .cart-item-discount-point-of-sales {
        width: 70px;
        padding: 5px;
        margin-bottom: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        text-align: center;
    }

    .cart-item-quantity-point-of-sales:focus,
    .cart-item-discount-point-of-sales:focus {
        border-color: #00AB4A;
    }

    .cart-item-remove-point-of-sales {
        background-color: #f44336;
        color: white;
        font-size: 10px;
        border: none;
        padding: 8px;
        border-radius: 50%;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .cart-item-remove-point-of-sales:hover {
        background-color: #d32f2f;
    }

    .cart-total-point-of-sales {
        font-size: 20px;
        font-weight: bold;
        margin-top: 20px;
        color: #333;
    }

    .btn-buy-point-of-sales {
        width: 100%;
        background-color: #00AB4A;
        color: #fff;
        padding: 7px;
        border: none;
        border-radius: 8px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    .btn-buy-point-of-sales:hover {
        background-color: #009e42;
    }

    .btn-buy-point-of-sales:active {
        background-color: #007a34;
        transform: translateY(2px);
    }

    @media (max-width: 1200px) {
        .product-cards-point-of-sales {
            grid-template-columns: repeat(3, 1fr);
        }

        .cart-items-point-of-sales {
            max-height: 45%;
            overflow-y: auto;
        }
    }

    @media (max-width: 768px) {
        .menu-point-of-sales {
            display: none;
            /* Ocultar el menú en dispositivos móviles */
        }

        .product-cards-point-of-sales {
            grid-template-columns: repeat(2, 1fr);
        }

        .cart-point-of-sales {
            width: 100%;
        }
    }
</style>


<!--this is for get all the data of the company when the user printer the ticket-->
{{#each dataCompany}}
    <input type="hidden" value="{{path_logo}}" id="path-icon-company">
    <input type="hidden" value="{{name}}" id="name-company">
{{/each}}


<!---->
<div class="container-point-of-sales">
    
    <!-- Menú de Compras (Izquierda) -->
    <div class="menu-point-of-sales">
        <div class="product-cards-point-of-sales">
            <!-- products -->
            {{#each products}}
                <div class="product-card-point-of-sales" onclick="addToCart('product-{{id}}','{{name}}', '{{barcode}}', {{price_1}},'{{purchase_unit}}')" id="{{barcode}}" id-product="{{id}}" data-price-1='{{price_1}}' data-price-2="{{price_2}}" data-price-3="{{price_3}}" purchase_unit="{{purchase_unit}}">
                    <img src="{{img}}" alt="Producto 1" id="product-{{id}}">
                    <br>
                    <label for="" class="card-text">${{price_1}}</label>
                    <div class="product-name-point-of-sales">{{name}}</div>
                    <div class="product-barcode-point-of-sales">{{barcode}}</div>
                    <input type="hidden" class="this_product_is_sold_in_bulk" value="{{this_product_is_sold_in_bulk}}">
                </div>
            {{/each}}
        </div>
    </div>

    <!-- Carrito de Compras (Derecha) -->
    <div class="cart-point-of-sales">

        <!--this is for create the select of the printer and for create the select of the options--->
        <div class="row">
            <div class="col-6">
                <label for="">Impresora</label>
                <select name="" id="dataPrinter" class="form-select">
                    <option value="">No imprimir Ticket</option>
                    {{#each boxes}}
                        <option value="{{ip_printer}}">{{num_box}}</option>
                    {{/each}}
                </select>
            </div>
            <div class="col-6">
                <label for=""></label>
                <div class="dropdown">
                    <button class="btn btn-primary button-spacing dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Funciones
                    </button>
                    <ul class="dropdown-menu">
                        {{#each dataEmployee}}
                            <input type="text" value="{{id_branches}}" style="display: none;" id="id_branch">
                            <li class="li-link"><a class="dropdown-item" id="emailClient" email="" idClient="null" onclick="select_customer('{{id_companies}}')"><i class="fi-icon fi-sr-following"></i> Buscar Cliente</a></li>
                            <li class="li-link"><a class="dropdown-item" onclick="create_new_order()" ><i class="fi-icon fi-br-biking-mountain"></i> Delivery</a></li>
                            <li class="li-link"><a class="dropdown-item" onclick="cash_movement('{{id}}','{{id_branches}}')"><i class="fi-icon fi-sr-hand-holding-usd"></i> Movimiento de caja</a></li>
                        {{/each}}
                    </ul>
                </div>
            </div>
        </div>
        <br>

        <!--this is the search of the menu--->
        <div class="search-container">
            <input type="text" class="search-input" placeholder="Escribe un código de barras..." id="search" autofocus name="usernameSearch">
            <i class="fi fi-br-search search-icon"></i>
        </div>
        <br>

        <!-- shopping cart -->
        <div class="cart-items-point-of-sales" id="cart-items">
            
        </div>


        <div class="cart-total-point-of-sales">
            <h6>Total de productos: <span id="products-total">0</span></h6>
            <p>Total del Carrito: <span id="cart-total">0.00</span></p>
            <button class="btn-buy-point-of-sales" onclick="buyItems()">Comprar</button>
        </div>
    </div>
</div>

<script>
    const cartItems = [];
    let cartTotal = 0;

    function addToCart(img,name, barcode, price,purchaseUnit) {
        const existingItem = cartItems.find(item => item.barcode === barcode);
        if (existingItem) {
            existingItem.quantity += 1;
        } else {
            cartItems.push({
                img:document.getElementById(img).src,
                name,
                barcode,
                price,
                quantity: 1,
                discount: 0,
                purchaseUnit
            });
        }
        updateCart();
    }

    function updateCart() {
        const cartItemsContainer = document.getElementById('cart-items');
        cartItemsContainer.innerHTML = '';

        cartItems.forEach(item => {
            const itemTotal = (item.price - item.discount) * item.quantity;
            cartItemsContainer.innerHTML += `
                <div class="cart-item-point-of-sales">
                    <img src="${item.img}" alt="${item.name}">
                    <div class="cart-item-info-point-of-sales">
                    <div class="cart-item-name-point-of-sales">${item.name}</div>
                    <div class="cart-item-barcode-point-of-sales">Código: ${item.barcode}</div>
                    Cant.
                    <input type="number" class="cart-item-quantity-point-of-sales" value="${item.quantity}" onchange="updateItemQuantity('${item.barcode}', this.value)"> ${item.purchaseUnit}
                    <br>
                    Desc.
                    <input type="number" class="cart-item-discount-point-of-sales" value="${item.discount}" onchange="updateItemDiscount('${item.barcode}', this.value)">
                    <div class="cart-item-price-point-of-sales">Precio: $${item.price.toFixed(2)}</div> 
                    <div class="cart-item-total-point-of-sales">Total: $${itemTotal.toFixed(2)}</div>
                    </div>
                    <button class="cart-item-remove-point-of-sales" onclick="removeItem('${item.barcode}')">X</button>
                </div>
            `;
        });

        //her we update the price of the shopping cart
        cartTotal = cartItems.reduce((total, item) => total + (item.price - item.discount) * item.quantity, 0);
        document.getElementById('cart-total').textContent = cartTotal.toFixed(2);

        //her we update the number of product that exist in the shopping cart
        document.getElementById('products-total').textContent= cartItems.length;
    }

    function updateItemQuantity(barcode, quantity) {
        const item = cartItems.find(item => item.barcode === barcode);
        if (item) {
            item.quantity = parseInt(quantity);
            updateCart();
        }
    }

    function updateItemDiscount(barcode, discount) {
        const item = cartItems.find(item => item.barcode === barcode);
        if (item) {
            item.discount = parseFloat(discount);
            updateCart();
        }
    }

    async function removeItem(barcode) {
        //her we will see if the user would like delete the product
        if (await questionMessage('Eliminar Producto 🤔', '¿Estás seguro de querer eliminar este producto?')) {
            //if the user would like delete the product, we will delete the product
            const index = cartItems.findIndex(item => item.barcode === barcode);
            if (index !== -1) {
                cartItems.splice(index, 1);
                updateCart();
            }
            notificationMessage('Producto eliminado 👍', 'El Producto fue eliminado correctamente')
        }
    }

    function buyItems() {
        alert('Compra realizada con éxito');
        cartItems.length = 0; // Limpiar carrito
        updateCart();
    }
</script>


<!------------------------->
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const searchInput = document.getElementById('search');
        const cards = document.querySelectorAll('.product-card-point-of-sales');

        //this is for the search in cellphone
        searchInput.addEventListener('input', () => {
            const query = searchInput.value.toLowerCase();
            cards.forEach(card => {
                const barcode = card.id.toLowerCase();
                if (barcode.includes(query) || query === '') {
                    card.style.display = '';
                } else {
                    card.style.display = 'none';
                }
            });
        });

        //we will see if the user did enter and the input
        searchInput.addEventListener('keydown', (event) => {
            if (event.key === 'Enter') {
                //we will see the barcode that the user would like search
                const valueInputBarcode=searchInput.value.toLowerCase();
                let barcodeInput=valueInputBarcode; //save the barcode that the user would like search

                /*
                ----now this is for know if the user write a barcode and a number----
                        example: milk*10
                */
                // Expression regular for know the format "text*number"
                const match = valueInputBarcode.split('*') //valueInputBarcode.match(/(.+)\*(\d+)$/);
                let repeatCount = 1; // value predetermined
                
                //we will see if exist a cant that the user would add to the card
                if (match) {
                    barcodeInput = match[0]; // Extract the text before that the asterisk 

                    //we will see if exist a cant that the user would add to the card
                    const cant=match[1];
                    if(cant){
                        repeatCount = parseInt(match[1], 10); //Extract and convert the number after the asterisk
                    }
                }


                //now we will to search the product that the user need add to the card
                let cardProduct=null;

                //we will to read all the card of the menu
                cards.forEach(card => {
                    const barcode = card.id.toLowerCase();
                    card.style.display = ''; //show all the card

                    //if we found the product, save his exist 
                    if (barcode==barcodeInput) {
                        cardProduct=card;
                    }
                });

                //we will see if we found the products for add to the card
                if(cardProduct){
                    // get all the data that need for add the product to the card
                    const productId = cardProduct.getAttribute('id-product');
                    const productName = cardProduct.querySelector('.product-name-point-of-sales').textContent.trim();
                    const purchaseUnit=cardProduct.getAttribute('purchase_unit');
                    const productPrice1 = parseFloat(cardProduct.querySelector('.card-text').textContent.trim().replace('$', '').replace(',', ''));
                    const productPrice2 = cardProduct.getAttribute('data-price-2') || '0'; 
                    const productPrice3 = cardProduct.getAttribute('data-price-3') || '0';
                    const typeProduct = cardProduct.querySelector('.this_product_is_sold_in_bulk').value || 'false';

                    //we will see if the product that the user would like add to the card is a product is sold in bulk
                    if(typeProduct=='true'){
                        // call to the function addFish with the product data
                        //addFish(productId, productName, productPrice1, productPrice2, productPrice3,typeProduct);
                       
                        addToCart('product-'+productId,productName,barcodeInput,productPrice1);
                        
                        //update the cant in the scale
                        repeatCount = parseFloat(match[1], 10); //this is for get decimals
                        document.getElementById('scales-store-weight-input').value=repeatCount;
                        update_weight_of_the_scale();
                    }else{
                        //if exist a cant that the user would add of the product, we use a loop "for" for add the product to the card
                        for (let i = 0; i < repeatCount; i++) {
                            // call to the function addFish with the product data
                            //addFish(productId, productName, productPrice1, productPrice2, productPrice3,typeProduct);
                            
                            const idImagen='product-'+productId;
                            addToCart(idImagen,productName,barcodeInput,productPrice1,purchaseUnit);
                        }
                    }


                    searchInput.value=""; //delete the value of the input
                    notificationMessage('❤️ ' + productName + ' ❤️', 'El producto fue agregado con éxito 😁');
                }else{
                    notificationMessageError('😬 Ups!','Este articulo no se encuentra en el menu.');
                }
            }
        });
    });
</script>


<!---this is the information for orden of send--->
<script>
    function get_data_order() {
        const idBranch = parseInt(document.getElementById('id_branch').value);
        const customerName = document.getElementById('customer-name').value || "";
        const customerCellphone = document.getElementById('customer-cellphone').value || "";
        const customerPhone = document.getElementById('customer-phone').value || "";
        const customerAddress = document.getElementById('customer-address').value || "";
        const customerComment = document.getElementById('customer-comment').value || "";

        return {
            idBranch: idBranch,
            name: customerName,
            cellphone: customerCellphone,
            phone: customerPhone,
            address: customerAddress,
            comment: customerComment
        };
    }

    function update_input_order(dataOrder){
        document.getElementById('customer-name').value = dataOrder[0];
        document.getElementById('customer-cellphone').value = dataOrder[1];
        document.getElementById('customer-phone').value = dataOrder[2];
        document.getElementById('customer-address').value = dataOrder[3];
        document.getElementById('customer-comment').value = dataOrder[4];

        //show the information of send
        var table = document.getElementById('table-order');
        table.style.display = 'block';
    }

    function reset_input_order(){
        document.getElementById('customer-name').value = "";
        document.getElementById('customer-cellphone').value = "";
        document.getElementById('customer-phone').value = "";
        document.getElementById('customer-address').value = "";
        document.getElementById('customer-comment').value = "";

        //delete the information of send
        var table = document.getElementById('table-order');
        table.style.display = 'none';
    }

    async function create_new_order(){
        //we will get the data of the order
        const oldDataOrder=get_data_order()
        const dataOrder=await show_create_new_order(oldDataOrder);
        //we will if the user not delete the data 
        if(dataOrder!=null){
            //we will see if the data is complete 
            if(dataOrder[0]!='' && dataOrder[3]!=''){
                update_input_order(dataOrder); //update the value of the inpus of the send 
            }else{
                reset_input_order();
                warningMessage('Error al guardar los datos', 'Asegúrate de que el envío tenga nombre del cliente y su dirección 👀');
            }
        }else{
            if(await questionMessage('Borrar datos del envío', '¿Estás seguro de borrar los datos del envío? 🤔')){
                reset_input_order();
                confirmationMessage('Datos del envío Borrados', 'Los datos del pedido para el repartidor han sido borrados exitosamente 👍');
            }
        }
    }
</script>
<script>

    //this is for update the input that is selected in the sweet alert of teh car
  function selectInput(input) {
    var inputs = document.querySelectorAll('.input-buy'); //get all the input of the sweet
    inputs.forEach(function(el) {
      el.classList.remove('selected'); //delete the classe <selected>
    });
    input.classList.add('selected'); //add the classe <selected> in the input that the user did click
  }
</script>


<!---this is for load the image if not exist a image in the card of the menu--->
<script>
document.addEventListener("DOMContentLoaded", function() {
    const defaultImage = '/img/icons_first/combo.webp';
    
    // Get all card images
    const cardImages = document.querySelectorAll('.card-img-top');
    
    cardImages.forEach(img => {
        if (!img.src || img.src === '') {
            img.src = defaultImage;
        }
    });
});
</script>

<!---this is the information for orden of send--->
<script src="/js/menu.js"></script>
<script src="/js/store/search.js"></script>
<script src="/js/search.js"></script>
<script src="/js/store/cashMovement.js"></script>
<script src="/js/store/return.js"></script>
<script>

    // Función para ajustar dinámicamente la clase de los elementos con la clase "container-combo"
    function adjustDivClass() {
        // Obtén todos los elementos con la clase "container-combo"
        const divElements = document.querySelectorAll('.container-combo');

        // Itera sobre cada elemento
        divElements.forEach(function (element) {
            if (window.innerWidth <= 1500) { // Si el ancho de la ventana es menor o igual a 500px
                element.classList.remove('col-3'); // Elimina la clase col-3
                element.classList.add('col-5'); // Agrega la clase col-5
            } else {
                element.classList.remove('col-5'); // Elimina la clase col-5
                element.classList.add('col-3'); // Agrega la clase col-3
            }
        });
    }

    // Llama a la función al cargar la página y cuando se redimensione la ventana
    window.onload = adjustDivClass;
    window.onresize = adjustDivClass;
</script>



<script src="/js/desktop/jquery-3.5.1.slim.min.js"></script>
<script src="/js/desktop/popper.min.js"></script>
<script src="/js/desktop/bootstrap.min.js"></script>
<script src="/js/desktop/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous"></script>
<script src="/js/desktop/bootstrap-nav.bundle.min.js"></script>


<!---this is for load the image if not exist a image in the card of the menu--->
<script>
document.addEventListener("DOMContentLoaded", function() {
    const defaultImage = '/img/icons_first/combo.webp';
    
    // Get all card images
    const cardImages = document.querySelectorAll('.card-img-top');
    
    cardImages.forEach(img => {
        if (!img.src || img.src === '') {
            img.src = defaultImage;
        }
    });
});
</script>

<script src="/js/point of sale/cashMovement.js"></script>
<script src="/js/point of sale/return.js"></script>

<!---js for print tickets--->
<script src="/js/point of sale/JQuery.js"></script>
<script src="/js/point of sale/escops.js"></script>
<script src="/js/point of sale/tickets.js"></script>